diff -ruNp src_clean/etc/system.conf proj2/etc/system.conf
--- src_clean/etc/system.conf	Sat Apr 13 06:32:24 2013
+++ proj2/etc/system.conf	Fri May 17 21:55:53 2013
@@ -233,7 +233,7 @@ service init
 {
 	uid     0;
 	ipc			# ipc targets allowed:
-		pm vfs rs vm
+		pm vfs rs vm sem
 		;
 	system	NONE;		# No kernel calls allowed
 	vm	BASIC;		# Only basic VM calls allowed
@@ -598,4 +598,19 @@ service fbd
 		at_wini
 		bios_wini
 	;
-};
+};
+
+
+service sem
+{
+	uid     0;
+	ipc	ALL;	# All ipc targets allowed
+	system	ALL;		# ALL kernel calls allowed
+	vm	BASIC;		# Only basic VM calls allowed
+	io	NONE;		# No I/O range allowed
+	irq	NONE;		# No IRQ allowed
+	sigmgr          rs;	# Signal manager is rs
+	scheduler   sched;	# Scheduler is sched
+	priority	 5;	# priority queue 4
+	quantum	       500;	# default server quantum
+};
\ No newline at end of file
diff -ruNp src_clean/include/minix/callnr.h proj2/include/minix/callnr.h
--- src_clean/include/minix/callnr.h	Sat Apr 13 06:32:30 2013
+++ proj2/include/minix/callnr.h	Fri May 17 21:51:51 2013
@@ -65,6 +65,7 @@
 #define SETGROUPS_O	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
+#define SEM			  69	/////////////////////////////////////////////////////////////////////////////////////
 
 /* Posix signal handling. */
 #define SIGACTION	  71
diff -ruNp src_clean/include/minix/com.h proj2/include/minix/com.h
--- src_clean/include/minix/com.h	Sat Apr 13 06:32:30 2013
+++ proj2/include/minix/com.h	Fri May 17 21:51:28 2013
@@ -80,7 +80,8 @@
 #define VM_PROC_NR   ((endpoint_t) 8)   /* memory server */
 #define PFS_PROC_NR  ((endpoint_t) 9)  /* pipe filesystem */
 #define SCHED_PROC_NR ((endpoint_t) 10)	/* scheduler */
-#define LAST_SPECIAL_PROC_NR	11	/* An untyped version for
+#define SEM_PROC_NR  ((endpoint_t) 11) /* semaphore server */     /////////////////////////////////////////////////////////////////////
+#define LAST_SPECIAL_PROC_NR	12	/* An untyped version for   //////////////////////////////////////////////////////////////////////////
                                            computation in macros.*/
 #define INIT_PROC_NR ((endpoint_t) LAST_SPECIAL_PROC_NR)  /* init
                                                         -- goes multiuser */
@@ -1279,5 +1280,23 @@
 /* Bits in 'BDEV_FLAGS' field of block device transfer requests. */
 #  define BDEV_NOFLAGS		0x00	/* no flags are set */
 #  define BDEV_FORCEWRITE	0x01	/* force write to disk immediately */
+
+
+/*===========================================================================*
+ *                Messages for the Semaphore Server			     *
+ *===========================================================================*/
+
+#define SEM_BASE		0x1700
+
+#define SEM_INIT	(SEM_BASE + 0)	/* initialize semaphore */
+#define SEM_DOWN	(SEM_BASE + 1)	/* decrement the semaphore */
+#define SEM_UP	(SEM_BASE + 2)	/* increment the semaphore */
+#define SEM_RELEASE	(SEM_BASE + 3)	/* retire the semaphore */
+
+/* DS field names */
+#  define SEM_ID		m1_i1		/* key for the data */
+#  define SEM_INIT_VALUE		m2_i1		/* length of key incl. '\0' */
+
+
 
 /* _MINIX_COM_H */
diff -ruNp src_clean/include/unistd.h proj2/include/unistd.h
--- src_clean/include/unistd.h	Sat Apr 13 06:32:30 2013
+++ proj2/include/unistd.h	Fri May 17 21:52:14 2013
@@ -439,6 +439,14 @@ extern	 char *suboptarg;	/* getsubopt(3) external vari
 
 __END_DECLS
 
+
+/* Semaphore Function Declarations */
+int sem_init(int);
+int sem_down(int);
+int sem_up(int);
+int sem_release(int);
+
+
 #ifdef __minix
 /* Minix expects RBT_* flags to be included with <unistd.h> */
 #include <sys/reboot.h>
diff -ruNp src_clean/kernel/table.c proj2/kernel/table.c
--- src_clean/kernel/table.c	Sat Apr 13 06:32:31 2013
+++ proj2/kernel/table.c	Fri May 17 21:52:49 2013
@@ -62,6 +62,7 @@ struct boot_image image[NR_BOOT_PROCS] = {
 {MFS_PROC_NR,   "mfs"   },
 {VM_PROC_NR,    "vm"    },
 {PFS_PROC_NR,   "pfs"   },
+{SEM_PROC_NR,	"sem"	}, /////////////////////////////////////////////////////////////////////////////////
 {INIT_PROC_NR,  "init"  },
 };
 
diff -ruNp src_clean/lib/libc/sys-minix/Makefile.inc proj2/lib/libc/sys-minix/Makefile.inc
--- src_clean/lib/libc/sys-minix/Makefile.inc	Sat Apr 13 06:32:35 2013
+++ proj2/lib/libc/sys-minix/Makefile.inc	Fri May 17 21:55:16 2013
@@ -16,7 +16,7 @@ SRCS+= 	accept.c access.c bind.c brk.c sbrk.c m_closef
 	vectorio.c shutdown.c sigaction.c sigpending.c sigreturn.c sigsuspend.c\
 	sigprocmask.c socket.c socketpair.c stat.c statvfs.c symlink.c \
 	sync.c syscall.c sysuname.c truncate.c umask.c unlink.c write.c \
-	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c
+	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c sem2.c
 
 # Minix specific syscalls.
 SRCS+= cprofile.c lseek64.c sprofile.c _mcontext.c
diff -ruNp src_clean/lib/libc/sys-minix/sem2.c proj2/lib/libc/sys-minix/sem2.c
--- src_clean/lib/libc/sys-minix/sem2.c	Thu Jan  1 00:00:00 1970
+++ proj2/lib/libc/sys-minix/sem2.c	Fri May 17 21:55:07 2013
@@ -0,0 +1,52 @@
+#include <sys/cdefs.h>
+#include "namespace.h"
+#include <lib.h>
+
+#include <unistd.h>
+
+
+int sem_init(int start_value)
+{
+	message m;
+	m.m1_i2 = start_value;
+	
+	//printf("in Sem_init\n");  //TEST
+	_syscall(SEM_PROC_NR, SEM_INIT, &m);
+	//printf("in Sem_init: %d\n",  m.m_type);  //TEST
+	return m.m_type; //Return the Semaphore ID
+}
+
+
+int sem_down(int semaphore_id)
+{
+	message m;
+	m.m1_i1 = semaphore_id;
+	//printf("in Sem_down %d by %d\n",semaphore_id, pid);  //TEST
+	_syscall(SEM_PROC_NR, SEM_DOWN, &m);
+	//printf("done waiting %d by %d\n",semaphore_id, pid);  //TEST
+	//sleep(1);
+	return m.m_type;
+}
+
+
+int sem_up(int semaphore_id)
+{
+	message m;
+	m.m1_i1 = semaphore_id;
+	//printf("in Sem_up %d by %d\n",semaphore_id, pid);  //TEST
+	
+	_syscall(SEM_PROC_NR, SEM_UP, &m);
+	//printf("semreturn: %d by %d\n",semaphore_id, pid);  //TEST
+	//sleep(1);
+	return m.m_type;
+}
+
+int sem_release(int semaphore)
+{
+	message m;
+	m.m1_i1 = semaphore;
+	//printf("in Sem_release\n");  //TEST
+	_syscall(SEM_PROC_NR, SEM_RELEASE, &m);
+	
+	return m.m_type;
+}
\ No newline at end of file
diff -ruNp src_clean/releasetools/Makefile proj2/releasetools/Makefile
--- src_clean/releasetools/Makefile	Sat Apr 13 06:32:40 2013
+++ proj2/releasetools/Makefile	Fri May 17 21:53:12 2013
@@ -31,6 +31,9 @@ PROGRAMS+= ${PROGROOT}/drivers/tty/tty
 PROGRAMS+= ${PROGROOT}/servers/mfs/mfs
 PROGRAMS+= ${PROGROOT}/servers/vm/vm
 PROGRAMS+= ${PROGROOT}/servers/pfs/pfs
+###################################################################################
+PROGRAMS+= ${PROGROOT}/servers/sem/sem
+##################################################################################
 PROGRAMS+= ${PROGROOT}/servers/init/init
 
 usage:	
diff -ruNp src_clean/servers/Makefile proj2/servers/Makefile
--- src_clean/servers/Makefile	Sat Apr 13 06:32:40 2013
+++ proj2/servers/Makefile	Fri May 17 21:53:53 2013
@@ -5,12 +5,12 @@
 
 .if ${MKIMAGEONLY} == "yes"
 
-SUBDIR=	ds init mfs pfs pm rs sched vfs vm
+SUBDIR=	ds init mfs pfs pm rs sched vfs vm sem
 
 .else
 
 SUBDIR=	ds ext2 inet init ipc is iso9660fs \
-	mfs pfs pm procfs rs sched vfs vm devman
+	mfs pfs pm procfs rs sched vfs vm devman sem
 
 .if ${MACHINE_ARCH} == "i386"
 SUBDIR+= hgfs vbfs
diff -ruNp src_clean/servers/rs/table.c proj2/servers/rs/table.c
--- src_clean/servers/rs/table.c	Sat Apr 13 06:32:40 2013
+++ proj2/servers/rs/table.c	Fri May 17 21:53:35 2013
@@ -25,6 +25,7 @@ struct boot_image_priv boot_image_priv_table[] = {
 {LOG_PROC_NR,  "log",    SRV_F  },
 {MFS_PROC_NR,"fs_imgrd", SRV_F  },
 {PFS_PROC_NR,  "pfs",    SRV_F  },
+{SEM_PROC_NR,  "sem",	 SRV_F	}, ////////////////////////////////////////////////////////////////////////////////////////////
 {INIT_PROC_NR, "init",   USR_F  },
 {NULL_BOOT_NR, "",       0,     } /* null entry */
 };
@@ -39,6 +40,7 @@ struct boot_image_sys boot_image_sys_table[] = {
   { LOG_PROC_NR,      SRV_SF                            },
   { MFS_PROC_NR,      0                                 },
   { PFS_PROC_NR,      SRV_SF                            },
+  { SEM_PROC_NR,	  SRV_SF							}, /////////////////////////////////////////////////////////////////////////////////
   { DEFAULT_BOOT_NR,  SRV_SF                            } /* default entry */
 };
 
diff -ruNp src_clean/servers/sem/Makefile proj2/servers/sem/Makefile
--- src_clean/servers/sem/Makefile	Thu Jan  1 00:00:00 1970
+++ proj2/servers/sem/Makefile	Fri May 17 21:54:05 2013
@@ -0,0 +1,12 @@
+# Makefile for Semaphore Server (SEM)
+PROG=	sem
+SRCS=	main.c hash.c
+
+DPADD+=	${LIBSYS}
+LDADD+=	-lsys
+
+MAN=
+
+BINDIR?= /usr/sbin
+
+.include <minix.bootprog.mk>
\ No newline at end of file
diff -ruNp src_clean/servers/sem/hash.c proj2/servers/sem/hash.c
--- src_clean/servers/sem/hash.c	Thu Jan  1 00:00:00 1970
+++ proj2/servers/sem/hash.c	Fri May 17 21:54:01 2013
@@ -0,0 +1,135 @@
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <math.h>
+#include "hash.h"
+
+int initializeHashTable(struct hashTable *ht, int size){
+	ht->array = CALLOC(size, struct hashNode*);
+	if(ht->array == NULL) {
+		return ENOMEM;
+	}
+	ht->numUsed = 0;
+	ht->maxSize = size;
+	return 0;
+}
+
+struct hashTable* addValue(struct hashTable *ht,int number, int value){
+	int i=0;
+	int address= number % ht->maxSize;
+	if(ht->numUsed == (ht->maxSize)/2){
+		ht = resize(ht);
+	}
+	while(ht->array[address]!=NULL)
+	{
+		if(ht->array[address]->active!=1)
+			break;
+		address=(address+(i*i)-((i-1)*(i-1)))% ht->maxSize;
+		i++;
+	}
+	if(ht->array[address]==NULL)
+	{
+		struct hashNode* n= CALLOC(1,struct hashNode);
+		if(n==NULL)
+			return NULL;
+	}
+	ht->array[address] = CALLOC(1,struct hashNode);
+	ht->array[address]->id=number;
+	ht->array[address]->value = value;
+	ht->array[address]->active = 1;
+	ht->array[address]->q = NULL;
+	ht->numUsed++;
+	return ht;
+}
+
+int hashTableFind(struct hashTable *ht, int number){
+	
+	int i=0;
+	int address= number % ht->maxSize;
+	while(ht->array[address]!=NULL)
+	{
+		if(ht->array[address]->id == number && ht->array[address]->active==1)
+			return address;
+		address=(address+(i*i)-((i-1)*(i-1)))% ht->maxSize;
+		i++;
+	}
+	return -1;
+}
+
+int hashTableRemove(struct hashTable *ht, int number){
+
+	int address = hashTableFind(ht, number);
+	if(address<0)
+		return EINVAL;
+	ht->array[address]->active=0;
+	ht->numUsed--;
+	
+}
+
+struct hashTable* resize(struct hashTable *ht){
+	struct hashTable* ht2;
+	ht2 = CALLOC(1, struct hashTable);
+
+	int prime=nextPrime(ht->maxSize);
+	if(initializeHashTable(ht2, prime) == 0){
+		int i;
+		for(i=0; i<ht->maxSize; i++){
+			if(ht->array[i] != NULL){
+				addValue(ht2, ht->array[i]->id, ht->array[i]->value);
+			}
+		}
+		ht2->maxSize = prime;
+		struct hashTable* tmp = ht;
+		ht = ht2;
+		free(tmp);
+		return ht;
+	}
+	return NULL;
+}
+
+int nextPrime(int num){
+	int i, j, k=0;
+	j=num*2+1;
+	while(k==0)
+	{
+		k=1;
+		for(i=3;i<j; i=i+2)
+		{
+			if(j%i==0)
+			{
+				k=0;
+				j=j+2;
+				break;
+			}
+		}
+	}
+	return j;
+}
+
+
+void enqueue(struct hashNode* n, endpoint_t pt){
+	struct qNode* newNode = CALLOC(1,struct qNode);
+	newNode->pt = pt;
+	newNode->next = NULL;
+	if(n->q != NULL){
+		n->tail->next = newNode;
+		n->tail = newNode;
+		return;
+	}
+	n->tail = newNode;
+	n->q = newNode;
+}
+
+endpoint_t dequeue(struct hashNode* n){
+	struct qNode* tmp;
+	if(n->q != NULL){
+		tmp = n->q;
+		endpoint_t end = tmp->pt;
+		n->q = n->q->next;
+		free(tmp);
+		return end;
+	}
+	if(n->q == NULL){
+		n->tail == NULL;
+	}
+}
\ No newline at end of file
diff -ruNp src_clean/servers/sem/hash.h proj2/servers/sem/hash.h
--- src_clean/servers/sem/hash.h	Thu Jan  1 00:00:00 1970
+++ proj2/servers/sem/hash.h	Fri May 17 21:54:02 2013
@@ -0,0 +1,42 @@
+//hash.h
+
+#include <minix/type.h>
+#include <errno.h>
+#define CALLOC(num, type)  (type*)calloc(num, sizeof(type))
+
+
+struct qNode{
+	endpoint_t pt;
+	struct qNode* next;
+};
+
+struct hashNode{
+	int id;
+	int value;
+	int active;
+	struct qNode* q;
+	struct qNode* tail;
+};
+
+struct hashTable{
+	struct hashNode** array;
+	int maxSize;
+	int numUsed;
+};
+
+
+int initializeHashTable(struct hashTable*, int);
+
+struct hashTable* addValue(struct hashTable*,int, int);
+
+int hashTableFind(struct hashTable*, int);
+
+int hashTableRemove(struct hashTable*, int);
+
+struct hashTable* resize(struct hashTable*);
+
+int nextPrime(int);
+
+void enqueue(struct hashNode*, endpoint_t);
+
+endpoint_t dequeue(struct hashNode*);
diff -ruNp src_clean/servers/sem/inc.h proj2/servers/sem/inc.h
--- src_clean/servers/sem/inc.h	Thu Jan  1 00:00:00 1970
+++ proj2/servers/sem/inc.h	Fri May 17 21:54:04 2013
@@ -0,0 +1,31 @@
+/* Header file including all needed system headers. */
+
+#define _POSIX_SOURCE      1	/* tell headers to include POSIX stuff */
+#define _MINIX             1	/* tell headers to include MINIX stuff */
+#define _SYSTEM            1    /* get OK and negative error codes */
+
+#include <sys/types.h>
+#include <sys/param.h>
+#include <limits.h>
+#include <errno.h>
+#include <regex.h>
+
+#include <minix/callnr.h>
+#include <minix/config.h>
+#include <minix/type.h>
+#include <minix/const.h>
+#include <minix/com.h>
+#include <minix/ds.h>
+#include <minix/syslib.h>
+#include <minix/sysinfo.h>
+#include <minix/sysutil.h>
+#include <minix/keymap.h>
+#include <minix/bitmap.h>
+#include <minix/rs.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <signal.h>
+
+#include "hash.h"
diff -ruNp src_clean/servers/sem/main.c proj2/servers/sem/main.c
--- src_clean/servers/sem/main.c	Thu Jan  1 00:00:00 1970
+++ proj2/servers/sem/main.c	Fri May 17 22:23:14 2013
@@ -0,0 +1,113 @@
+
+#include "inc.h"
+
+struct hashTable* do_init(message*, struct hashTable*);
+int do_up(message*, struct hashTable*);
+int do_down(message*, struct hashTable*);
+int do_release(message*, struct hashTable*);
+
+int semNumber;
+/*===========================================================================*
+ *				main                                         *
+ *===========================================================================*/
+int main(int argc, char **argv)
+{
+	sef_startup();
+	message m;
+	int result;
+	
+	semNumber = 0;
+	struct hashTable* ht;
+	ht = CALLOC(1,struct hashTable);
+	initializeHashTable(ht,17);
+	
+	while(1){
+		sef_receive(ANY, &m);
+
+		switch(m.m_type) {
+			case SEM_INIT: ht = do_init(&m, ht); break;
+			case SEM_UP: result = do_up(&m, ht); break;
+			case SEM_DOWN: result = do_down(&m, ht); break;
+			case SEM_RELEASE: result = do_release(&m, ht); break;
+			default: result = EINVAL;
+		}
+
+		if (result != EDONTREPLY) {
+			m.m_type = result;
+			if(ht == NULL)
+				m.m_type = ENOMEM;
+			send(m.m_source, &m);
+		}
+	}
+	return 0;
+}
+
+
+struct hashTable* do_init(message *m_ptr, struct hashTable* ht){
+	ht = addValue(ht, semNumber, m_ptr->m1_i2);
+	if(ht == NULL){
+		return NULL;
+	}
+	m_ptr->m1_i1 = semNumber;
+	semNumber++;
+	return ht;
+}
+
+
+int do_up(message *m_ptr, struct hashTable* ht) {
+	message m; /* place to construct reply message */
+	int address;
+	/* Add resource, and return OK to let caller continue. */
+	address = hashTableFind(ht, m_ptr->m1_i1);
+	if(address == -1){
+		return EINVAL;
+	}
+	struct hashNode* current;
+	current = ht->array[address];
+	current->value++; /* add a resource */
+	/* Check if there are processes blocked on the semaphore. */
+	if (current->q != NULL) { /* are any processes blocked? */
+		m.m_type = OK; 
+		m.m_source = dequeue(current); /* remove process from queue */
+		current->value--; /* process takes a resource */
+		send(m.m_source, &m); /* reply to unblock the process */
+	}
+	return(OK); /* let the caller continue */
+}
+
+int do_down(message *m_ptr, struct hashTable* ht) {
+	int address;
+	address = hashTableFind(ht, m_ptr->m1_i1);
+	if(address == -1){
+		return EINVAL;
+	}
+	struct hashNode* current;
+	current = ht->array[address];
+	/* Resource available. Decrement semaphore and reply. */
+	if (current->value > 0) {
+		current->value--;		/* take a resource */
+		return(OK); /* let the caller continue */
+	}
+	/* Resource taken. Enqueue and block the caller. */
+	enqueue(current,m_ptr->m_source); /* add process to queue */
+	return(EDONTREPLY); /* do not reply in order to block the caller */
+}
+
+
+int do_release(message *m_ptr, struct hashTable *ht){
+	
+	int address;
+	address = hashTableFind(ht, m_ptr->m1_i1);
+	if(address == -1){
+		return EINVAL;
+	}
+	struct hashNode* current;
+	current = ht->array[address];
+	if(current->q != NULL){
+		return EINUSE;
+	}
+	if(hashTableRemove(ht, m_ptr->m1_i1) < 0){
+		return EINVAL;
+	}
+	return 0;
+}
\ No newline at end of file
diff -ruNp src_clean/sys/sys/errno.h proj2/sys/sys/errno.h
--- src_clean/sys/sys/errno.h	Sat Apr 13 06:32:41 2013
+++ proj2/sys/sys/errno.h	Fri May 17 21:56:32 2013
@@ -75,6 +75,7 @@
 #define EILSEQ        (_SIGN 44 )  /* illegal byte sequence */
 #define	ENOMSG	      (_SIGN 45 )  /* No message of desired type */
 #define EOVERFLOW     (_SIGN 46 )  /* Value too large to be stored in data type */
+#define EINUSE        (_SIGN 47 )  //////////////////////////////////////////////////////
 
 /* The following errors relate to networking. */
 #define EPACKSIZE     (_SIGN 50 )  /* invalid packet size for some protocol */
